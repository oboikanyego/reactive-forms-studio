import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { HostListener } from '@angular/core';
import { NFileIOService } from '../services/n-fileIO.service';
export class NScanDirective {
    constructor(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    methodToHandleMouseClickAction() {
        this.getPicture()
            .then((sucess) => this.onsuccess.emit(sucess))
            .catch((error) => this.onerror.emit(error));
    }
    getPicture() {
        return new Promise((resolve, reject) => {
            this.fsv.scanPicture(this.scanOptions).then(res => {
                if (this.scanOptions.doUpload) {
                    const options = {
                        'formData': res,
                        'entityName': this.scanOptions.entityName,
                        'metadata': this.scanOptions.metadata
                    };
                    this.fsv.upload(options).then(uri => {
                        resolve(uri);
                    }).catch(err => reject(err));
                }
                else {
                    resolve(res);
                }
            }).catch((err) => {
                return reject(err);
            });
        });
    }
}
NScanDirective.decorators = [
    { type: Directive, args: [{
                selector: '[n-scan]'
            },] }
];
NScanDirective.ctorParameters = () => [
    { type: NFileIOService }
];
NScanDirective.propDecorators = {
    scanOptions: [{ type: Input }],
    onsuccess: [{ type: Output }],
    onerror: [{ type: Output }],
    methodToHandleMouseClickAction: [{ type: HostListener, args: ['click',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1zY2FubmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvbmV1dHJpbm9zLW1vZHVsZS9uZXV0cmlub3MtZmlsZS9kaXJlY3RpdmVzL24tc2Nhbm5lci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQU05RCxNQUFNLE9BQU8sY0FBYztJQUt6QixZQUFvQixHQUFtQjtRQUFuQixRQUFHLEdBQUgsR0FBRyxDQUFnQjtRQUg3QixjQUFTLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDbEQsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBRWYsQ0FBQztJQUVyQiw4QkFBOEI7UUFDbkQsSUFBSSxDQUFDLFVBQVUsRUFBRTthQUNkLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDN0MsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxVQUFVO1FBQ1IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUVoRCxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFO29CQUM3QixNQUFNLE9BQU8sR0FBRzt3QkFDZCxVQUFVLEVBQUUsR0FBRzt3QkFDZixZQUFZLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVO3dCQUN6QyxVQUFVLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRO3FCQUN0QyxDQUFDO29CQUNGLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTt3QkFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNmLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2lCQUM5QjtxQkFFRDtvQkFDRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ2Q7WUFDSCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDZixPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNyQixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBdENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsVUFBVTthQUNyQjs7O1lBTFEsY0FBYzs7OzBCQU9wQixLQUFLO3dCQUNMLE1BQU07c0JBQ04sTUFBTTs2Q0FJTixZQUFZLFNBQUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5GaWxlSU9TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbi1maWxlSU8uc2VydmljZSc7XG5pbXBvcnQgeyBORGlyZWN0aXZlT3B0aW9ucyB9IGZyb20gJy4vZGlyZWN0aXZlLmNsYXNzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW24tc2Nhbl0nXG59KVxuZXhwb3J0IGNsYXNzIE5TY2FuRGlyZWN0aXZlIHtcbiAgQElucHV0KCkgc2Nhbk9wdGlvbnM6IE5EaXJlY3RpdmVPcHRpb25zO1xuICBAT3V0cHV0KCkgb25zdWNjZXNzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIG9uZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZnN2OiBORmlsZUlPU2VydmljZSkgeyB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKSBtZXRob2RUb0hhbmRsZU1vdXNlQ2xpY2tBY3Rpb24oKSB7XG4gICAgdGhpcy5nZXRQaWN0dXJlKClcbiAgICAgIC50aGVuKChzdWNlc3MpID0+IHRoaXMub25zdWNjZXNzLmVtaXQoc3VjZXNzKSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHRoaXMub25lcnJvci5lbWl0KGVycm9yKSk7XG4gIH1cblxuICBnZXRQaWN0dXJlKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuZnN2LnNjYW5QaWN0dXJlKHRoaXMuc2Nhbk9wdGlvbnMpLnRoZW4ocmVzID0+IHtcblxuICAgICAgICBpZiAodGhpcy5zY2FuT3B0aW9ucy5kb1VwbG9hZCkge1xuICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAnZm9ybURhdGEnOiByZXMsXG4gICAgICAgICAgICAnZW50aXR5TmFtZSc6IHRoaXMuc2Nhbk9wdGlvbnMuZW50aXR5TmFtZSxcbiAgICAgICAgICAgICdtZXRhZGF0YSc6IHRoaXMuc2Nhbk9wdGlvbnMubWV0YWRhdGFcbiAgICAgICAgICB9O1xuICAgICAgICAgIHRoaXMuZnN2LnVwbG9hZChvcHRpb25zKS50aGVuKHVyaSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKHVyaSk7XG4gICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHJlamVjdChlcnIpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICByZXNvbHZlKHJlcyk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==