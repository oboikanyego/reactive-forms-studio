import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { HostListener } from '@angular/core';
import { NFileIOService } from '../services/n-fileIO.service';
export class NCameraDirective {
    constructor(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    methodToHandleMouseClickAction() {
        this.getPicture()
            .then(sucess => this.onsuccess.emit(sucess))
            .catch(error => this.onerror.emit(error));
    }
    getPicture() {
        return new Promise((resolve, reject) => {
            this.fsv.getPicture(this.cameraOptions).then(res => {
                const options = {
                    'formData': res,
                    'entityName': this.cameraOptions.entityName,
                    'metadata': this.cameraOptions.metadata
                };
                this.fsv.upload(options)
                    .then(uri => resolve(uri))
                    .catch(err => reject(err));
            }).catch(err => reject(err));
        });
    }
}
NCameraDirective.decorators = [
    { type: Directive, args: [{
                selector: '[n-camera]'
            },] }
];
NCameraDirective.ctorParameters = () => [
    { type: NFileIOService }
];
NCameraDirective.propDecorators = {
    cameraOptions: [{ type: Input }],
    onsuccess: [{ type: Output }],
    onerror: [{ type: Output }],
    methodToHandleMouseClickAction: [{ type: HostListener, args: ['click',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1jYW1lcmEuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC9uZXV0cmlub3MtbW9kdWxlL25ldXRyaW5vcy1maWxlL2RpcmVjdGl2ZXMvbi1jYW1lcmEuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFpQjlELE1BQU0sT0FBTyxnQkFBZ0I7SUFLM0IsWUFBb0IsR0FBbUI7UUFBbkIsUUFBRyxHQUFILEdBQUcsQ0FBZ0I7UUFIN0IsY0FBUyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2xELFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUVmLENBQUM7SUFFckIsOEJBQThCO1FBQ25ELElBQUksQ0FBQyxVQUFVLEVBQUU7YUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMzQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxVQUFVO1FBQ1IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNqRCxNQUFNLE9BQU8sR0FBRztvQkFDZCxVQUFVLEVBQUUsR0FBRztvQkFDZixZQUFZLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVO29CQUMzQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRO2lCQUN4QyxDQUFDO2dCQUNGLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztxQkFDckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FCQUN6QixLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMvQixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7OztZQTdCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFlBQVk7YUFDdkI7OztZQWhCUSxjQUFjOzs7NEJBa0JwQixLQUFLO3dCQUNMLE1BQU07c0JBQ04sTUFBTTs2Q0FJTixZQUFZLFNBQUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5GaWxlSU9TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbi1maWxlSU8uc2VydmljZSc7XG5pbXBvcnQgeyBORGlyZWN0aXZlT3B0aW9ucyB9IGZyb20gJy4vZGlyZWN0aXZlLmNsYXNzJztcblxuXG5kZWNsYXJlIGNvbnN0IG5hdmlnYXRvcjogYW55O1xuXG5leHBvcnQgaW50ZXJmYWNlIENhbWVyYU9wdGlvbnMge1xuICBxdWFsaXR5PzogNTA7XG4gIGRlc3RpbmF0aW9uVHlwZT86IDEgfCAyO1xuICBFbmNvZGluZ1R5cGU/OiAwIHwgMTtcbiAgTWVkaWFUeXBlPzogMCB8IDEgfCAyO1xuICBQaWN0dXJlU291cmNlVHlwZT86IDAgfCAxIHwgMjtcbn1cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW24tY2FtZXJhXSdcbn0pXG5leHBvcnQgY2xhc3MgTkNhbWVyYURpcmVjdGl2ZSB7XG4gIEBJbnB1dCgpIGNhbWVyYU9wdGlvbnM6IE5EaXJlY3RpdmVPcHRpb25zO1xuICBAT3V0cHV0KCkgb25zdWNjZXNzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIG9uZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZnN2OiBORmlsZUlPU2VydmljZSkgeyB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKSBtZXRob2RUb0hhbmRsZU1vdXNlQ2xpY2tBY3Rpb24oKSB7XG4gICAgdGhpcy5nZXRQaWN0dXJlKClcbiAgICAgIC50aGVuKHN1Y2VzcyA9PiB0aGlzLm9uc3VjY2Vzcy5lbWl0KHN1Y2VzcykpXG4gICAgICAuY2F0Y2goZXJyb3IgPT4gdGhpcy5vbmVycm9yLmVtaXQoZXJyb3IpKTtcbiAgfVxuXG4gIGdldFBpY3R1cmUoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5mc3YuZ2V0UGljdHVyZSh0aGlzLmNhbWVyYU9wdGlvbnMpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAnZm9ybURhdGEnOiByZXMsXG4gICAgICAgICAgJ2VudGl0eU5hbWUnOiB0aGlzLmNhbWVyYU9wdGlvbnMuZW50aXR5TmFtZSxcbiAgICAgICAgICAnbWV0YWRhdGEnOiB0aGlzLmNhbWVyYU9wdGlvbnMubWV0YWRhdGFcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5mc3YudXBsb2FkKG9wdGlvbnMpXG4gICAgICAgICAgLnRoZW4odXJpID0+IHJlc29sdmUodXJpKSlcbiAgICAgICAgICAuY2F0Y2goZXJyID0+IHJlamVjdChlcnIpKTtcbiAgICAgIH0pLmNhdGNoKGVyciA9PiByZWplY3QoZXJyKSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==