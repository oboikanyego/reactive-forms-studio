import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import * as signing from 'signature_pad';
export class NSignatureComponent {
    constructor() {
        this.imageDataValue = '';
        this.signaturePad = '';
        this.mode = 'responsive'; // 'click-fullscreen' or 'responsive'
        this.canvasMode = 'fullscreen'; // 'responsive' or 'fullscreen'
        this.imageDataChange = new EventEmitter();
        this.imageDataUrl = new EventEmitter();
    }
    get imageData() {
        return this.imageDataValue;
    }
    set imageData(val) {
        var _a;
        this.imageDataValue = JSON.parse(JSON.stringify(val));
        if ((_a = this.signaturePad) === null || _a === void 0 ? void 0 : _a.canvas) {
            this.saveFromSavedData(this.imageDataValue);
            if (this.mode !== 'responsive') {
                this.imageSrcDataUrl = this.signaturePad.toDataURL();
            }
        }
    }
    ngOnInit() {
        this.savedDataPoints = this.previousSavedData = JSON.parse(JSON.stringify(this.imageData));
    }
    ngAfterViewInit() {
        this.createCanvas();
        this.saveFromSavedData(this.savedDataPoints);
        setTimeout(() => {
            if (this.mode !== 'responsive') {
                this.hideCanvas();
                this.fitToContainer(this.signaturecanvas.nativeElement, document.body.clientHeight, document.body.clientWidth);
                this.clearCanvas();
                this.drawFromSavedData(this.savedDataPoints);
                this.imageSrcDataUrl = this.signaturePad.toDataURL();
            }
        });
    }
    saveFromSavedData(val) {
        this.updatePreviousSaveData(val);
        this.drawFromSavedData(val);
        this.savedDataPoints = this.signaturePad.toData();
    }
    createCanvas() {
        this.fitToContainer(this.signaturecanvas.nativeElement);
        this.signaturePad = new signing.default(this.signaturecanvas.nativeElement, this.assignOptions());
    }
    saveCavas() {
        if (this.signaturePad) {
            if (this.signaturePad.isEmpty()) {
                this.clearCanvas();
            }
            this.imageDataChange.emit(JSON.parse(JSON.stringify(this.signaturePad.toData())));
            this.imageDataUrl.emit(this.signaturePad.toDataURL());
            if (this.mode !== 'responsive') {
                this.hideCanvas();
                this.imageSrcDataUrl = this.signaturePad.toDataURL();
            }
            this.saveFromSavedData(this.signaturePad.toData());
        }
    }
    clearCanvas() {
        this.signaturePad.clear();
    }
    undoCanvas() {
        const data = this.signaturePad.toData();
        if (data) {
            data.pop(); // remove the last dot or line
            this.signaturePad.fromData(data);
        }
    }
    showCanvas() {
        this.classAbs = true;
        this.canvasMode = 'fullscreen';
        if (!this.signaturePad) {
            this.createCanvas();
        }
        this.fitToContainer(this.signaturecanvas.nativeElement, document.body.clientHeight, document.body.clientWidth);
        this.clearCanvas();
        this.updatePreviousSaveData(this.savedDataPoints);
        this.drawFromSavedData(this.savedDataPoints);
    }
    hideCanvas() {
        this.canvasMode = 'responsive';
    }
    // cancel currently drawn
    cancel() {
        this.savedDataPoints = Object.assign([], this.previousSavedData);
        this.clearCanvas();
        this.drawFromSavedData(this.savedDataPoints);
    }
    updatePreviousSaveData(val) {
        this.previousSavedData = Object.assign([], val);
    }
    drawFromSavedData(val) {
        if (val) {
            this.signaturePad.clear();
            this.signaturePad.fromData(val);
        }
    }
    fitToContainer(element, height, width) {
        element.style.width = '100%';
        element.style.height = 'calc(100% - 56px)';
        if (height && width) {
            element.width = width;
            element.height = height - 56;
        }
        else {
            element.width = element.offsetWidth;
            element.height = element.offsetHeight;
        }
    }
    assignOptions() {
        let options = {};
        options['backgroundColor'] = this.checkIfValidValueAndRGB(this.backgroundColor, 'backgroundColor');
        options['dotSize'] = this.checkIfValidValueAndNumber(this.dotSize, 'dotSize');
        options['minWidth'] = this.checkIfValidValueAndNumber(this.minWidth, 'minWidth');
        options['maxWidth'] = this.checkIfValidValueAndNumber(this.maxWidth, 'maxWidth');
        options['throttle'] = this.checkIfValidValueAndNumber(this.throttle, 'throttle');
        options['minDistance'] = this.checkIfValidValueAndNumber(this.minDistance, 'minDistance');
        options['penColor'] = this.checkIfValidValueAndRGB(this.penColor, 'penColor');
        options['velocityFilterWeight'] = this.checkIfValidValueAndNumber(this.velocityFilterWeight, 'velocityFilterWeight');
        options = JSON.parse(JSON.stringify(options)); // removing all undefined fields
        options['onBegin'] = this.checkIfValidValueAndFunction(this.onBegin, 'onBegin');
        options['onEnd'] = this.checkIfValidValueAndFunction(this.onEnd, 'onEnd');
        return options;
    }
    checkIfValidValueAndNumber(num, name) {
        if (this.checkIfValid(num) && this.checkNumber(num)) {
            return num;
        }
        this.invalidToast(name, 'num');
        return undefined;
    }
    checkIfValidValueAndRGB(color, name) {
        if (this.checkIfValid(color) && this.checkRGB(color)) {
            return color;
        }
        this.invalidToast(name, 'rgb');
        return undefined;
    }
    checkIfValidValueAndFunction(fn, name) {
        if (this.checkIfValid(fn) && this.checkIfValidFunction(fn)) {
            return fn;
        }
        this.invalidToast(name, 'function format');
        return undefined;
    }
    checkIfValid(value) {
        return value !== undefined && value !== null ? value : undefined;
    }
    checkNumber(num) {
        return !this.checkIsNan(Number(num)) ? Number(num) : undefined;
    }
    checkIfValidFunction(fn) {
        return typeof fn === 'function' ? fn : undefined;
    }
    checkRGB(color) {
        const matchColors1 = new RegExp(/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/);
        const matchColors2 = new RegExp(/rgb\((\d{1,3}),[ \t]+(\d{1,3}),(\d{1,3})\)/);
        const matchColors3 = new RegExp(/rgb\((\d{1,3}),(\d{1,3}),[ \t]+(\d{1,3})\)/);
        return matchColors1.test(color) || matchColors2.test(color) || matchColors3.test(color);
    }
    checkIsNan(value) {
        return Number.isNaN(value);
    }
    invalidToast(optionName, optionType) {
        switch (optionType) {
            case 'num':
                // this.snackbar.open(`Invalid ${optionName} (number or float) given, taking default value instead.`, 'OK');
                break;
            case 'rgb':
                // this.snackbar.open(`Invalid ${optionName} format Eg: rgb(255, 255, 255)  given, taking default value instead.`, 'OK');
                break;
        }
        return;
    }
    isDataURL(s) {
        if (s && typeof s === 'string') {
            const regex = /^\s*data:([a-z]+\/[a-z]+(;[a-z\-]+\=[a-z\-]+)?)?(;base64)?,[a-z0-9\!\$\&\'\,\(\)\*\+\,\;\=\-\.\_\~\:\@\/\?\%\s]*\s*$/i;
            return !!s.match(regex);
        }
        else {
            return false;
        }
    }
}
NSignatureComponent.decorators = [
    { type: Component, args: [{
                selector: 'n-signature',
                template: "<div style=\"width: 100%; height: 100%\">\n\t<div fxFill fxLayout=\"row\" *ngIf=\"mode === 'click-fullscreen' && canvasMode !== 'fullscreen'\" class=\"signature-component-border\">\n\t\t<div fxFlex=\"calc(100%-56px)\" fxLayout=\"column\">\n\t\t\t<img *ngIf=\"imageSrcDataUrl\" [src]=\"imageSrcDataUrl\" fxFill />\n\t\t</div>\n\t\t<div fxFlex=\"56px\" fxLayoutAlign=\" center\" class=\"signature-component-border\">\n\t\t\t<button mat-icon-button (click)=\"showCanvas()\">\n\t\t\t\t<mat-icon>mode_edit</mat-icon>\n\t\t\t</button>\n\t\t</div>\n\t</div>\n\t<div\n\t\tfxFill\n\t\tfxLayout=\"column\"\n\t\tclass=\"signature-component-border\"\n\t\t[fxShow]=\"(mode === 'click-fullscreen' && canvasMode === 'fullscreen') || mode === 'responsive'\"\n\t\t[ngClass]=\"{'signature-canvas-fullscreen': classAbs}\"\n\t>\n\t\t<canvas #signaturecanvas></canvas>\n\t\t<div fxFlex=\"56px\" fxLayoutAlign=\"center center\" class=\"signature-component-border\">\n\t\t\t<button mat-icon-button (click)=\"undoCanvas()\">\n\t\t\t\t<mat-icon>undo</mat-icon>\n\t\t\t</button>\n\t\t\t<button mat-icon-button (click)=\"clearCanvas()\">\n\t\t\t\t<mat-icon>loop</mat-icon>\n\t\t\t</button>\n\t\t\t<button mat-icon-button (click)=\"saveCavas()\">\n\t\t\t\t<mat-icon>save</mat-icon>\n\t\t\t</button>\n\t\t\t<button mat-icon-button (click)=\"canvasMode = 'responsive'; cancel()\">\n\t\t\t\t<mat-icon>clear</mat-icon>\n\t\t\t</button>\n\t\t</div>\n\t</div>\n</div>\n",
                styles: [`
			:host {
				height: 100% !important;
			}
			.signature-canvas-fullscreen {
				position: absolute;
				top: 0;
				bottom: 0;
				right: 0;
				left: 0;
			}
			.signature-component-border {
				border: 2px solid black;
			}
		`]
            },] }
];
NSignatureComponent.propDecorators = {
    signaturecanvas: [{ type: ViewChild, args: ['signaturecanvas', { static: false },] }],
    canvasparent: [{ type: ViewChild, args: ['canvasparent', { static: false },] }],
    backgroundColor: [{ type: Input, args: ['backgroundColor',] }],
    dotSize: [{ type: Input, args: ['dotSize',] }],
    minWidth: [{ type: Input, args: ['minWidth',] }],
    maxWidth: [{ type: Input, args: ['maxWidth',] }],
    throttle: [{ type: Input, args: ['throttle',] }],
    minDistance: [{ type: Input, args: ['minDistance',] }],
    penColor: [{ type: Input, args: ['penColor',] }],
    velocityFilterWeight: [{ type: Input, args: ['velocityFilterWeight',] }],
    onBegin: [{ type: Input, args: ['onBegin',] }],
    onEnd: [{ type: Input, args: ['onEnd',] }],
    mode: [{ type: Input, args: ['mode',] }],
    imageDataChange: [{ type: Output }],
    imageDataUrl: [{ type: Output }],
    imageData: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,